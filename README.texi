\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename org-gtd.info
@settitle Org GTD User Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
Copyright (C) 2018-2021 Aldric Giacomoni <trevoke@@gmail.com>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the GNU
General Public License for more details.
@end copying

@dircategory Emacs
@direntry
* Org GTD: (org-gtd).   An opinionated GTD flow implemented in org-mode.
@end direntry

@finalout
@titlepage
@title Org GTD User Manual
@subtitle for version 2.0
@author Aldric Giacomoni
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Org GTD User Manual

Org GTD is an attempt to implement the GTD flow described in the GTD
book as faithfully as possible.

@noindent
This manual is for Org GtD version 2.0.
@end ifnottex

@menu
* Org GTD::
* Using Org GTD::                How Org GTD maps to the GTD flow
* Troubleshooting::

@detailmenu
--- The Detailed Node Listing ---

Org GTD

* Summary::                      quick intro to GTD
* Upgrading::                    How to upgrade your local setup across major versions
* Installing::                   Get Org GTD in your emacs
* Configuring::                  Required and optional system configuration

Upgrading

* 2.0.0 <- 1.1.x: 200 <- 11x.


Installing

* use-package::
* Manually::


Configuring

* The easy way::
* required configuration of sub-packages::
* configuration options for org-gtd::
* Recommended key bindings::


Using Org GTD

* Adding things to the inbox::
* Processing the inbox::
* Accessing NEXT and scheduled actions::
* Cleaning up / archiving completed work::
* Multiple files / refile targets::

Processing the inbox

* Projects::


Accessing NEXT and scheduled actions

* Show next actions::


Troubleshooting

* Projects without a NEXT item::

@end detailmenu
@end menu

@node Org GTD
@chapter Org GTD

@menu
* Summary::                      quick intro to GTD
* Upgrading::                    How to upgrade your local setup across major versions
* Installing::                   Get Org GTD in your emacs
* Configuring::                  Required and optional system configuration
@end menu

@node Summary
@section Summary

This package tries to replicate as closely as possible the GTD workflow (see diagram below).

This package, and this documentation, assume familiarity with the flow of GTD as described in the book.

This package provides a system that allows you to capture incoming things into an inbox, then process the inbox and categorize each item based on the GTD categories. It leverages org-agenda to show today's items as well as the NEXT items. It also has a simple project management system, which currently assumes all tasks in a project are sequential.
@example
                                    ┌───────┐
                                    │"STUFF"│
                                    └──┬────┘
                                       │
                                    ┌──▼────┐
                                    │IN BOX │
                                    └──┬────┘
                                       │               Eliminate   ┌─────────┐
                                       │             ┌────────────►│  Trash  │
                                   ┌───▼───────┐     │             └─────────┘
                                   │What is it?│     │
                                   └───┬───────┘     │             ┌─────────┐
                                       │             │ Incubate    │ Someday/│
                                       │             ├────────────►│ Maybe   │
┌──────────┐  YES (Multi-Step)    ┌────▼────────┐ NO │             └─────────┘
│ Projects │◄─────────────────────┤   Is it     ├────┤
└─┬────▲───┤                      │ Actionable? │    │ File        ┌─────────┐
  │    │   └────────────────────┐ └──────┬──────┘    └────────────►│Reference│
  │    │      Review for Actions│        │                         └─────────┘
┌─▼────┴───┐                    │        │YES
│ Planning │                    └───────►│
└──────────┘                             │
                                  ┌──────▼─────┐     Less than
                  Delegate        │ What's the │     2 minutes     ┌────────┐
                     ┌────────────┤Next Action?├──────────────────►│ DO IT  │
                     │            └───────┬────┘                   └────────┘
                     │                    │
                     │                    │  FOR ME
                     │                    │           Specific Date or Time
                     │                    ├────────────────────────────┐
                     │              ASAP  │                            │
                ┌────▼─────┐           ┌──▼───────┐              ┌─────▼────┐
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                └──────────┘           └──────────┘              └──────────┘
                 Waiting For           Next Actions                 Calendar

@end example

@node Upgrading
@section Upgrading

@menu
* 2.0.0 <- 1.1.x: 200 <- 11x.
@end menu

@node 200 <- 11x
@subsection 2.0.0 <- 1.1.x

@itemize
@item
rename CANCELED to CNCL
@end itemize

@node Installing
@section Installing

This package requires emacs 27.1 or higher.

This package is on MELPA and MELPA stable under the name @code{org-gtd}.

@menu
* use-package::
* Manually::
@end menu

@node use-package
@subsection use-package

Just make sure this is loaded after @code{org-mode} like so.
@lisp
(use-package org-gtd :after org)
@end lisp

@node Manually
@subsection Manually

Check out the source code for dependencies and install them.
Then, clone this repo to a directory of your choice, e.g. @samp{~/.emacs.d/packages}.
Finally, add this to your config:
@lisp
(add-to-list 'load-path "~/.emacs.d/packages")
(require 'org-gtd)
@end lisp

@node Configuring
@section Configuring

@menu
* The easy way::
* required configuration of sub-packages::
* configuration options for org-gtd::
* Recommended key bindings::
@end menu

@node The easy way
@subsection The easy way

Just turn on @code{org-gtd-mode} (@code{M-x org-gtd-mode}). This will set up emacs, Org mode, and Org GTD's dependencies. Turn off @code{org-gtd-mode} to restore emacs to pre-org-gtd settings.

Note, you should still head over to the @ref{Recommended key bindings} section.

@node required configuration of sub-packages
@subsection required configuration of sub-packages

@menu
* org-edna::
@end menu

@node org-edna
@unnumberedsubsubsec org-edna

package: @uref{https://www.nongnu.org/org-edna-el/}

This is one of the dependencies. This setting change is REQUIRED@. It automatically changes the next TODO heading to NEXT in a project when you've finished the current task.

You do not need to make this change if you choose to toggle @code{org-gtd-mode}.
@lisp
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
@end lisp

@node configuration options for org-gtd
@subsection configuration options for org-gtd

The most direct way to find out about the configuration options for org-gtd is to see the customize group: @code{M-x customize-group RET org-gtd}. They are all optional because they all come with default values.

The only one you may want to change before starting to use Org GTD is @code{org-gtd-directory}, which is the directory that Org GTD
will look to for everything it needs to do.

The configuration options will also be mentioned in the relevant subsections of @ref{Using Org GTD}.

@node Recommended key bindings
@subsection Recommended key bindings

There's an important keymap you'll want to make the flow of processing the inbox smoother. To limit impact on your emacs configuration, there is a specific keymap you can use. The function you'll want to bind is @code{org-gtd-choose}. I suggest @code{C-c c}, as in the following example.

@lisp
(define-key org-gtd-process-map (kbd "C-c c") #'org-gtd-choose)
@end lisp

The GTD flow can be roughly split into a top-level steps. I suggest using @code{"C-c d"} as a key chord for these in the global keymap.

First, capture into the inbox. :

@itemize
@item
org-gtd-agenda-cancel-project
@item
org-gtd-agenda-delegate
@item
org-gtd-agenda-projectify
@item
org-gtd-cancel-project
@item
org-gtd-delegate

@item
org-gtd-agenda-daily
@item
org-gtd-show-all-next
@item
org-gtd-show-stuck-projects
@end itemize

@lisp
(("C-c d c" . org-gtd-capture)
 ("C-c d a" . org-agenda-list)
 ("C-c d p" . org-gtd-process-inbox)
 ("C-c d n" . org-gtd-show-all-next)
 ("C-c d s" . org-gtd-show-stuck-projects))

;; this is used in a very specific minor mode, so you can have a pretty common keybinding.
:bind (:map org-gtd-process-map
              ("C-c c" . org-gtd-clarify-finalize))
@end lisp

@node Using Org GTD
@chapter Using Org GTD

Here are the categories of actions from GTD that we have to be able to handle:

@itemize
@item
adding things to the inbox
@item
processing the inbox
@item
accessing NEXT and scheduled actions
@item
cleaning up / archiving completed work
@end itemize

Other elements of GTD, such as reviews, are currently unimplemented: as the user, you can simply open the files to review things for now.

@menu
* Adding things to the inbox::
* Processing the inbox::
* Accessing NEXT and scheduled actions::
* Cleaning up / archiving completed work::
* Multiple files / refile targets::
@end menu

@node Adding things to the inbox
@section Adding things to the inbox

The inbox is a file called @code{inbox.org} in the directory stored in the variable @code{org-gtd-directory}. By default this variable is @code{~/gtd}.

Org GTD provides one function to capture items: @code{M-x org-gtd-capture}. In my setup I have this booked globally as such:

@lisp
(global-set-key "C-c d c" #'org-gtd-capture)
@end lisp

This function overrides @code{org-capture} and uses the variable @code{org-gtd-capture-templates} to define org-gtd-specific capture templates. By default it comes with two templates, one to just capture a new item, and one to capture an item with a link to the file where you were when you started the capture.

@node Processing the inbox
@section Processing the inbox

Processing the inbox means taking everything in the inbox, one at a time, and refining/categorizing them so they are instantly useful when you are looking at available next / scheduled actions.

You can start processing the inbox with @code{org-gtd-process-inbox}. This will select the inbox buffer and hide everything but the first item in the inbox, then give you control to refine it.

When you are done refining it, call @code{M-x org-gtd-choose} (or hit your keybinding for it, see @ref{Recommended key bindings}). This will open a transient menu to let you choose how Org GTD should categorize this item.

You have a number of possible choices for each item you process. Subsections will explain how Org GTD handles each one.

@image{doc/processing-menu,,,,png}

@table @asis
@item @strong{[Q]uick Action}
Quick action. Do it now, then choose this to mark the item as DONΕ and archive it.
@item @strong{[T]rash}
This is not actionable and it's not knowledge for later. Choose this to mark the item as CNCL and archive it.
@item @strong{[P]roject}
This is a multi-step action. I'll describe how to handle these below.
@item @strong{[C]alendar}
This is a single item to be done at a given date or time. You'll be presented with org-mode's date picker, then it'll refile the item. You'll find this in the agenda later.
@item @strong{[D]elegate}
Let someone else do this. Write the name of the person doing it, and choose a time to check up on that item.
@item @strong{[S]ingle action}
This is a one-off to be done when possible.
@item @strong{[A]rchive}
This is knowledge to be stored away.
@item @strong{[I]ncubate}
no action now, review later
@end table

In addition you have @strong{[X]} for "exit early", which you can use to stop processing the inbox and restore emacs to its non-inbox-processing state.

After the item-type-specific behavior, you will have the option to add custom decorations to each item, based on how you prefer to think about (filter, find, etc.) the items when you do GTD@.

The decorations are tracked in @code{org-gtd-process-item-hooks}, a list of functions. By default there is one element in the list, to add tags to the item.

This process will continue, item after item, until you hit @strong{x} to exit early or until you run out of items to process.

@menu
* Projects::
@end menu

@node Projects
@subsection Projects

A "project" is defined as a top-level org heading with a set of second-level org headings. When you choose "project" and enter the editing mode, create such a headline structure, like in the following example.

@uref{doc/project-processing.png, file:doc/project-processing.png}

As indicated above, when you are finished creating your headline structure, hit your chosen keybinding to exit the edit mode (in the above screenshot, @code{C-c c}) and move on to processing the next item.

A project is defined as "completed" when all its tasks are marked as DONE@.
A project is defined as "canceled" when its last task is marked as CNCL@.

You can cancel a project by calling @code{org-gtd-agenda-cancel-project} from the agenda view, when the point is on the next task of the project.

DO NOTE: it is surprisingly difficult to add a custom note when canceling, so if you want to add a note explaining why you canceled the project, you will have to do so manually.

You can archive (move to the archive file, using the org-mode feature) completed and canceled projects by using @code{org-gtd-archive-completed-items}.

@node Accessing NEXT and scheduled actions
@section Accessing NEXT and scheduled actions

Here's what the agenda may look like when you've processed the inbox a bit.

@image{doc/agenda,,,,png}

@menu
* Show next actions::
@end menu

@node Show next actions
@subsection Show next actions

One of the ways to see what's next for you to do is to see all the next actions ( @code{C-c d n} ).

@image{doc/show-all-next,,,,png}

@node Cleaning up / archiving completed work
@section Cleaning up / archiving completed work

Doing this without user intervention is tricky, as it makes undoing actions more complicated. As such, Org GTD provides a function that will go through the @code{org-gtd-directory} files, find the headings that belong to Org GTD (see @ref{Multiple files / refile targets}), and archive the finished items.

The variable @code{org-gtd-archive-location} hosts a @strong{function} that returns a string matching the @code{org-archive-location} definition. It is a function in order to make the filename entirely dynamic.

The function to archive everything is @code{M-x org-gtd-archive-completed-items}.

@node Multiple files / refile targets
@section Multiple files / refile targets

If you would like to add new refile targets, it's simple. Add a top-level heading and make sure it has the following properties drawer.
@example
:PROPERTIES:
:TRIGGER: next-sibling todo!(NEXT)
:ORG_GTD: Projects
:END:
@end example

@node Troubleshooting
@chapter Troubleshooting

@menu
* Projects without a NEXT item::
@end menu

@node Projects without a NEXT item
@section Projects without a NEXT item

Sometimes things break. Use @code{C-c d s} to find all projects that don't have a NEXT item, which is to say, all projects that the package will not surface and help you finish.

@bye