\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename org-gtd.info
@settitle Org GTD User Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
Copyright (C) 2018-2021 Aldric Giacomoni <trevoke@@gmail.com>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the GNU
General Public License for more details.
@end copying

@dircategory Emacs
@direntry
* Org GTD: (org-gtd).   An opinionated GTD flow implemented in org-mode.
@end direntry

@finalout
@titlepage
@title Org GTD User Manual
@subtitle for version 2.0
@author Aldric Giacomoni
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Org GTD User Manual

Org GTD is an attempt to implement the GTD flow described in the GTD
book as faithfully as possible.

@noindent
This manual is for Org GtD version 2.0.
@end ifnottex

@menu
* Org GTD::

@detailmenu
--- The Detailed Node Listing ---

Org GTD

* Summary::                      quick intro to GTD
* Upgrading::                    How to upgrade your local setup across major versions
* Installing::                   Get Org GTD in your emacs
* Configuring::                  Required and optional system configuration
* Using::
* Troubleshooting::

Upgrading

* 2.0.0 <- 1.1.x: 200 <- 11x.


Installing

* use-package::
* Manually::


Configuring

* The easy way::
* required configuration of sub-packages::
* configuration options for org-gtd::
* Recommended key bindings::


Using

* Regular use::
* Projects::
* Agenda::
* Show next actions::


Troubleshooting

* Projects without a NEXT item::


@end detailmenu
@end menu

@node Org GTD
@chapter Org GTD

@menu
* Summary::                      quick intro to GTD
* Upgrading::                    How to upgrade your local setup across major versions
* Installing::                   Get Org GTD in your emacs
* Configuring::                  Required and optional system configuration
* Using::
* Troubleshooting::
@end menu

@node Summary
@section Summary

This package tries to replicate as closely as possible the GTD workflow (see diagram below).

This package, and this documentation, assume familiarity with the flow of GTD as described in the book.

This package provides a system that allows you to capture incoming things into an inbox, then process the inbox and categorize each item based on the GTD categories. It leverages org-agenda to show today's items as well as the NEXT items. It also has a simple project management system, which currently assumes all tasks in a project are sequential.
@example
                                    ┌───────┐
                                    │"STUFF"│
                                    └──┬────┘
                                       │
                                    ┌──▼────┐
                                    │IN BOX │
                                    └──┬────┘
                                       │               Eliminate   ┌─────────┐
                                       │             ┌────────────►│  Trash  │
                                   ┌───▼───────┐     │             └─────────┘
                                   │What is it?│     │
                                   └───┬───────┘     │             ┌─────────┐
                                       │             │ Incubate    │ Someday/│
                                       │             ├────────────►│ Maybe   │
┌──────────┐  YES (Multi-Step)    ┌────▼────────┐ NO │             └─────────┘
│ Projects │◄─────────────────────┤   Is it     ├────┤
└─┬────▲───┤                      │ Actionable? │    │ File        ┌─────────┐
  │    │   └────────────────────┐ └──────┬──────┘    └────────────►│Reference│
  │    │      Review for Actions│        │                         └─────────┘
┌─▼────┴───┐                    │        │YES
│ Planning │                    └───────►│
└──────────┘                             │
                                  ┌──────▼─────┐     Less than
                  Delegate        │ What's the │     2 minutes     ┌────────┐
                     ┌────────────┤Next Action?├──────────────────►│ DO IT  │
                     │            └───────┬────┘                   └────────┘
                     │                    │
                     │                    │  FOR ME
                     │                    │           Specific Date or Time
                     │                    ├────────────────────────────┐
                     │              ASAP  │                            │
                ┌────▼─────┐           ┌──▼───────┐              ┌─────▼────┐
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                │          │           │          │              │          │
                └──────────┘           └──────────┘              └──────────┘
                 Waiting For           Next Actions                 Calendar

@end example

@node Upgrading
@section Upgrading

@menu
* 2.0.0 <- 1.1.x: 200 <- 11x.
@end menu

@node 200 <- 11x
@subsection 2.0.0 <- 1.1.x

@itemize
@item
rename CANCELED to CNCL
@end itemize

@node Installing
@section Installing

This package requires emacs 27.1 or higher.

This package is on MELPA and MELPA stable under the name @code{org-gtd}.

@menu
* use-package::
* Manually::
@end menu

@node use-package
@subsection use-package

Just make sure this is loaded after @code{org-mode} like so.
@lisp
(use-package org-gtd :after org)
@end lisp

@node Manually
@subsection Manually

Check out the source code for dependencies and install them.
Then, clone this repo to a directory of your choice, e.g. @samp{~/.emacs.d/packages}.
Finally, add this to your config:
@lisp
(add-to-list 'load-path "~/.emacs.d/packages")
(require 'org-gtd)
@end lisp

@node Configuring
@section Configuring

@menu
* The easy way::
* required configuration of sub-packages::
* configuration options for org-gtd::
* Recommended key bindings::
@end menu

@node The easy way
@subsection The easy way

Just turn on @code{org-gtd-mode} (@code{M-x org-gtd-mode}). This will set up emacs, Org mode, and Org GTD's dependencies. Turn off @code{org-gtd-mode} to restore emacs to pre-org-gtd settings.

Note, you should still head over to the @ref{Recommended key bindings} section.

@node required configuration of sub-packages
@subsection required configuration of sub-packages

@menu
* org-edna::
@end menu

@node org-edna
@unnumberedsubsubsec org-edna

package: @uref{https://www.nongnu.org/org-edna-el/}

This is one of the dependencies. This setting change is REQUIRED@. It automatically changes the next TODO heading to NEXT in a project when you've finished the current task.

You do not need to make this change if you choose to toggle @code{org-gtd-mode}.
@lisp
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
@end lisp

@node configuration options for org-gtd
@subsection configuration options for org-gtd

The best way to find out about the configuration options for org-gtd is to see the customize group: @code{M-x customize-group RET org-gtd}. They are all optional because they all come with default values.

The only one you may want to change before starting to use Org GTD is @code{org-gtd-directory}, which is the directory that Org GTD
will look to for everything it needs to do.

@node Recommended key bindings
@subsection Recommended key bindings

There's an important keymap you'll want to make the flow of processing the inbox smoother. I suggest @code{C-c c}.

@lisp
(define-key org-gtd-process-map (kbd "C-c c") #'org-gtd-choose)
@end lisp

@itemize
@item
org-gtd-agenda-cancel-project
@item
org-gtd-agenda-daily
@item
org-gtd-agenda-delegate
@item
org-gtd-agenda-projectify
@item
org-gtd-archive-completed-items
@item
org-gtd-cancel-project
@item
org-gtd-capture
@item
org-gtd-choose
@item
org-gtd-delegate
@item
org-gtd-mode
@item
org-gtd-process-inbox
@item
org-gtd-show-all-next
@item
org-gtd-show-stuck-projects
@end itemize

@lisp
(("C-c d c" . org-gtd-capture)
 ("C-c d a" . org-agenda-list)
 ("C-c d p" . org-gtd-process-inbox)
 ("C-c d n" . org-gtd-show-all-next)
 ("C-c d s" . org-gtd-show-stuck-projects))

;; this is used in a very specific minor mode, so you can have a pretty common keybinding.
:bind (:map org-gtd-process-map
              ("C-c c" . org-gtd-clarify-finalize))
@end lisp

@node Using
@section Using

@menu
* Regular use::
* Projects::
* Agenda::
* Show next actions::
@end menu

@node Regular use
@subsection Regular use

I will assume you have used the suggested keybindings above.

GTD uses one basic axiom: everything that comes your way goes into the inbox. You do this with @code{C-c d c}. You also have to regularly process the inbox, which you do with @code{C-c d p}.

You have a number of possible choices for each item you process, which I will quickly go over. When you process the inbox, you will see each inbox item, one at a time, with an interface letting you decide what to do with the item (shown below with @code{C-h} for extra information):

@image{doc/processing-menu,,,,png}

@table @asis
@item @strong{Quick Action}
You've taken care of this action just now. Choose this to mark the item as DONΕ and archive it.
@item @strong{Throw out}
This is not actionable and it's not knowledge for later. Choose this to mark the item as CNCL and archive it.
@item @strong{Project}
This is a multi-step action. I'll describe how to handle these below.
@item @strong{Calendar}
This is a single item to be done at a given date or time. You'll be presented with org-mode's date picker, then it'll refile the item. You'll find this in the agenda later.
@item @strong{Delegate}
Let someone else do this. Write the name of the person doing it, and choose a time to check up on that item.
@item @strong{Single action}
This is a one-off to be done when possible. You can add tags to help you.
@item @strong{Reference}
This is knowledge to be stored away. I'll describe how to handle these below.
@item @strong{Incubate}
no action now, review later
@end table

When processing each item, the following will happen:
@enumerate
@item
You'll enter an editing mode where you can refine the wording, create additional sub-headlines, add your own tags and other such metadata
@item
You'll hit a keybinding of your choice (recommended: @code{C-c c}, see config below) to confirm your work and move on to the next item
@item
when you move on to the next item, @samp{org-gtd} will add keywords (NEXT, TODO, DONE, etc.) in order to handle the bookkeeping and get you set up with org-agenda and the other provided org-gtd functions.
@end enumerate

@node Projects
@subsection Projects

A "project" is defined as a top-level org heading with a set of second-level org headings. When you choose "project" and enter the editing mode, create such a headline structure, like in the following example.

@uref{doc/project-processing.png, file:doc/project-processing.png}

As indicated above, when you are finished creating your headline structure, hit your chosen keybinding to exit the edit mode (in the above screenshot, @code{C-c c}) and move on to processing the next item.

A project is defined as "completed" when all its tasks are marked as DONE@.
A project is defined as "canceled" when its last task is marked as CNCL@.

You can cancel a project by calling @code{org-gtd-agenda-cancel-project} from the agenda view, when the point is on the next task of the project.

DO NOTE: it is surprisingly difficult to add a custom note when canceling, so if you want to add a note explaining why you canceled the project, you will have to do so manually.

You can archive (move to the archive file, using the org-mode feature) completed and canceled projects by using @code{org-gtd-archive-completed-items}.

@menu
* Multiple files / refile targets::
@end menu

@node Multiple files / refile targets
@unnumberedsubsubsec Multiple files / refile targets

If you would like to add a new refile targets, it's simple. Add a top-level heading and make sure it has the following properties drawer:
@example
:PROPERTIES:
:TRIGGER: next-sibling todo!(NEXT)
:ORG_GTD: Projects
:END:
@end example

@node Agenda
@subsection Agenda

Here's what the agenda may look like when you've processed the inbox a bit.

@image{doc/agenda,,,,png}

@node Show next actions
@subsection Show next actions

One of the ways to see what's next for you to do is to see all the next actions ( @code{C-c d n} ).

@image{doc/show-all-next,,,,png}

@node Troubleshooting
@section Troubleshooting

@menu
* Projects without a NEXT item::
@end menu

@node Projects without a NEXT item
@subsection Projects without a NEXT item

Sometimes things break. Use @code{C-c d s} to find all projects that don't have a NEXT item, which is to say, all projects that the package will not surface and help you finish.

@bye