* org-gtd
** Summary
This package tries to replicate as closely as possible the GTD workflow (see diagram below).
#+CAPTION: Courtesy of https://xebia.com/blog/peace-of-mind-in-a-state-of-overload/gtd_chart/
#+NAME: The GTD Workflow
[[file:doc/gtd_chart.png]]

Image courtesy of https://xebia.com/blog/peace-of-mind-in-a-state-of-overload/gtd_chart/
** Using

I will assume you have used the suggested keybindings above for this explanation.

GTD uses one basic axiom: everything that comes your way goes into the inbox. You do this with ~C-c d c~. Once that's done, of course, you have to actually process the inbox, which you do with ~C-c d i~.

You have a number of possible choices for each item you process, which I will quickly go over. When you process the inbox, you will be greeted with an interface like this for each item:

[[file:doc/ogpi-1.png]]

- *Quick Action* :: You've taken care of this action just now. Choose this to mark the item as DONÎ• and archive it.
- *Throw out* :: This is not actionable and it's not knowledge for later. Choose this to mark the item as CANCELED and archive it.
- *Project* :: This is a multi-step action. I'll describe how to handle these below.
- *Calendar* :: This is a single item to be done at a given date or time. You'll be presented with org-mode's date picker, then it'll refile the item. You'll find this in the agenda later.
- *Delegate* :: Let someone else do this. Write the name of the person doing it, and choose a time to check up on that item.
- *Single action* :: This is a one-off to be done when possible. You can add tags to help you.
- *Reference* :: This is knowledge to be stored away. I'll describe how to handle these below.
- *Incubate* :: no action now, review later

When processing each item you'll get a chance to add tags and other such metadata. ~org-gtd~ will add keywords (e.g. TODO, DONE) for you, so don't worry about them. Do the work that only you can do.

*** Projects
A "project" is defined as an org heading with a set of children headings.
The package will add keywords as relevant.

When you are processing the inbox and creating a project, emacs enters a recursive edit mode to let you define and refine the project. When finished, press ~C-c C-c~ to exit the recursive edit and go back to processing the inbox.
*** Agenda
Here's what the agenda may look like when you've processed the inbox a bit.

[[file:doc/agenda.png]]

*** Show next actions

One of the ways to see what's next for you to do is to see all the next actions ( ~M-x org-gtd-show-all-next~ ).

[[file:doc/show-all-next.png]]
** Installing

This package requires emacs 26.1 or higher.

This package will hopefully soon be on Melpa and Melpa Stable.

In the meanwhile:

Check out the source code for dependencies and install them.

Then, clone this repo to =~/.emacs.d/packages=

Finally, add this to your config:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages")
(require 'org-gtd)
#+end_src

** Configuring

*** I trust you let me just copy-paste the whole thing in my init file
Okay! Scroll past if you want more detailed explanations.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d c") 'org-gtd-capture)
  (global-set-key (kbd "C-c d a") 'org-agenda-list)
  (global-set-key (kbd "C-c d i") 'org-gtd-process-inbox)
  (global-set-key (kbd "C-c d n") 'org-gtd-show-all-next)
  (global-set-key (kbd "C-c d s") 'org-gtd-show-stuck-projects)

  (setq org-gtd-directory "~/gtd/")

  (setq org-agenda-files `(,org-gtd-directory))

  (setq org-capture-templates `(("i" "Inbox"
                                 entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
                                 "* %?\n%U\n\n  %i"
                                 :kill-buffer t)
                                ("t" "Todo with link"
                                 entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
                                 "* %?\n%U\n\n  %i\n  %a"
                                 :kill-buffer t)))

  (setq org-agenda-property-list '("DELEGATED_TO"))
  (setq org-agenda-property-position 'next-line)

  (setq org-edna-use-inheritance t)
  (org-edna-load)
#+end_src
*** Keybindings
It is suggested that you bind a few functions to keys:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d c") 'org-gtd-capture)
  (global-set-key (kbd "C-c d a") 'org-agenda-list)
  (global-set-key (kbd "C-c d i") 'org-gtd-process-inbox)
  (global-set-key (kbd "C-c d n") 'org-gtd-show-all-next)
  (global-set-key (kbd "C-c d s") 'org-gtd-show-stuck-projects)
#+end_src

*** Variables specific to org-gtd
Either use ~M-x customize-group RET org-gtd RET~ or set the following variable.

- ~org-gtd-directory~ : the path where the GTD files will live. The default value is =~/gtd/=.
*** Variables from org-mode
**** org-agenda-files
If you aren't using any files yet, add ~(setq org-agenda-files `(,org-gtd-directory))~.

If you have it configured, you need to add our directory to it: ~(add-to-list 'org-agenda-files org-gtd-directory)~
**** org-capture-templates
We recommend the addition of the following two entries to your capture templates.

- ~i~ just adds a simple entry
- ~t~ adds an entry with a link to wherever you were in emacs when you decided to enter this todo

If you already have capture templates, of course, add to the list, don't just overwrite the setting.
#+begin_src elisp
  (setq org-capture-templates `(("i" "Inbox"
                                 entry (file ,(org-gtd--path org-gtd-inbox))
                                 "* %?\n%U\n\n  %i"
                                 :kill-buffer t)
                                ("t" "Todo with link"
                                 entry (file ,(org-gtd--path org-gtd-inbox))
                                 "* %?\n%U\n\n  %i\n  %a"
                                 :kill-buffer t)))

#+end_src
*** Other packages
**** org-agenda-property
This package displays headline properties in the agenda. We use it so you can quickly see to whom you delegated a task.

#+begin_src emacs-lisp
(setq org-agenda-property-list '("DELEGATED_TO"))
(setq org-agenda-property-position 'next-line) ;; not necessary, my preference
#+end_src

**** org-edna
~org-gtd~ needs ~org-edna~ to be loaded and using property inheritance, so you'll need to add this to your config file:

#+begin_src emacs-lisp
(setq org-edna-use-inheritance t)
(org-edna-load)
#+end_src
