* org-gtd
** Summary
This package tries to replicate as closely as possible the GTD workflow (see diagram below).
#+CAPTION: Courtesy of https://xebia.com/blog/peace-of-mind-in-a-state-of-overload/gtd_chart/
#+NAME: The GTD Workflow
[[file:gtd_chart.png]]

Image courtesy of https://xebia.com/blog/peace-of-mind-in-a-state-of-overload/gtd_chart/
** Installing

This package requires emacs 26.1 or higher.

This package will hopefully soon be on Melpa and Melpa Stable.

In the meanwhile:

First, install ~org-edna~, ~org-brain~, and ~f~.

Then, clone this repo to =~/.emacs.d/packages=

Finally, add this to your config:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages")
(require 'org-gtd)
#+end_src

** Configuring
*** Keybindings
It is suggested that you bind a few functions to keys:

- ~(global-set-key "\C-cc" 'org-capture)~
- ~(global-set-key "\C-ca" 'org-agenda)~
- ~(global-set-key "\C-ci" 'org-gtd-process-inbox)~
- ~(global-set-key "\C-cn" 'org-gtd-show-all-next)~
- ~(global-set-key "\C-cs" 'org-gtd-show-stuck-projects)~


*** Variables specific to org-gtd
Either use ~M-x customize-group RET org-gtd RET~ or set the following variable.

- ~org-gtd-directory~ : the path where the GTD files will live. The default value is =~/gtd/=.
*** Variables from org-mode
**** org-agenda-files
If you aren't using any files yet, add ~(setq org-agenda-files `(,org-gtd-directory))~.

If you have it configured, you need to add our directory to it: ~(add-to-list 'org-agenda-files org-gtd-directory)~
**** org-capture-templates
We recommend the addition of the following two entries to your capture templates.

- ~i~ just adds a simple entry
- ~t~ adds an entry with a link to wherever you were in emacs when you decided to enter this todo

If you already have capture templates, of course, add to the list, don't just overwrite it, as above.
#+begin_src elisp
  (setq org-capture-templates `(("i" "Inbox"
                                 entry (file ,(org-gtd--path org-gtd-inbox))
                                 "* TODO %?\n  %i"
                                 :kill-buffer t)
                                ("t" "Todo with link"
                                 entry (file ,(org-gtd--path org-gtd-inbox))
                                 "* TODO %?\n  %i\n  %a"
                                 :kill-buffer t)))

#+end_src
*** Other packages
**** org-brain
[[https://github.com/Kungsgeten/org-brain][org-brain]] is used as the reference store. if you weren't using it before, you'll need to configure it. Here is my configuration for reference. Note that there is one fragile thing here: the ~org-gtd-directory~ variable has to exist and it has to end with a =/=.

#+begin_src emacs-lisp
  (use-package org-brain
    :init
    (setq org-brain-path (concat org-gtd-directory "brain"))
    ;; For Evil users
    ;; (with-eval-after-load 'evil
    ;;   (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12))
#+end_src
**** org-edna
~org-gtd~ needs ~org-edna~ to be loaded and using property inheritance, so you'll need to add this to your config file:

#+begin_src emacs-lisp
(setq org-edna-use-inheritance t)
(org-edna-load)
#+end_src

** Using

The four frequent actions from GTD map to emacs lisp actions this way:

| GTD                        | action                        | suggested keybinding |
|----------------------------+-------------------------------+----------------------|
| Add to the inbox           | (org-capture)                 | C-c c                |
| Process inbox              | (org-gtd-process-inbox)       | C-c i                |
| See all next actions       | (org-gtd-show-all-next)       | C-c n                |
| See what's coming up today | (org-agenda)                  | C-c a a              |
| See stuck projects         | (org-gtd-show-stuck-projects) | C-c s                |


TO NOTE, VERY IMPORTANT:

A "project" is defined as an org heading with a set of children headings. The project heading should not have a TODO tag. The first child should have a NEXT tag. All other children should have a TODO tag.

When you are processing the inbox and creating a project, emacs enters a recursive edit mode. This just means that, to tell emacs you are done creating the subtree, you have to press ~C-M-c~ to exit the recursive edit and go back to processing the inbox.
*** TODO org-brain as reference store
